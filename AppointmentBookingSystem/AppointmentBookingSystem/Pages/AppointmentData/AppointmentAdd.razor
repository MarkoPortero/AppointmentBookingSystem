@page "/AppointmentData/AppointmentAdd"

@inject NavigationManager NavigationManager
@inject IStaffData StaffDatabase
@inject IPatientData PatientDatabase
@inject IAppointmentData AppointmentDatabase
@inject IJSRuntime JsRuntime
@inject ILogger<AppointmentAdd> Logger;
@attribute [Authorize(Roles = "Administrator, Receptionist")]

<h1>Add a new appointment</h1>

@if (StaffMembers is null || Patients is null)
{
    <p><em>Loading Staff and Patients...</em></p>
}
else
{
    <EditForm Model="_appointmentModel" OnValidSubmit="@InsertAppointment">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <label class="col-sm-2 col-form-label">Staff Name</label>
            <InputSelect id="Staff ID" @bind-Value="StaffMember">
                <option>Staff Member</option>
                @foreach (var staff in StaffMembers)
                    {
                        if (staff.RoleId == 3)
                        {
                        <option>@staff.Id @staff.FirstName @staff.LastName</option>
                        }
                    }
            </InputSelect>
        </div>
        <div class="form-group">
            <label class="col-sm-2 col-form-label">Patient Name</label>
            <InputSelect id="PatientId" @bind-Value="SelectedPatient">
                <option>Patient</option>
                @foreach (var patient in Patients)
                    {
                    <option>@patient.Id @patient.FirstName @patient.LastName</option>
                    }
            </InputSelect>
        </div>
        <div class="form-group">
            <label class="col-sm-2 col-form-label">Appointment Date</label>
            <InputDateTime id="address" @bind-Value="_appointmentModel.AppointmentDateTime" />
        </div>
        <div class="form-group">
            <label class="col-sm-2 col-form-label">Appointment Duration</label>
            <InputSelect id="role" @bind-Value="Duration">
                <option>15</option>
                <option>30</option>
                <option>45</option>
                <option>60</option>
            </InputSelect>
        </div>

        <button type="submit" class="btn btn-primary">Save Appointment</button>
        <button type="button" class="btn btn-primary" @onclick="BackToAppointments">Back</button>
    </EditForm>
}
@code {
    AppointmentModel _appointmentModel = new AppointmentModel();
    private List<StaffModel> StaffMembers { get; set; }
    private List<PatientModel> Patients { get; set; }
    private List<AppointmentModel> Appointments { get; set; }
    private string SelectedPatient { get; set; }
    private string StaffMember { get; set; }
    private string Duration { get; set; } = "15";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            StaffMembers = await StaffDatabase.GetAllStaff();
            Patients = await PatientDatabase.GetAllPatients();
            Appointments = await AppointmentDatabase.GetAllAppointments();
        }
        catch(SqlException ex)
        {
            Logger.LogError("Error loading information from server", ex);
        }
    }

    private void BackToAppointments()
    {
        NavigationManager.NavigateTo("/Appointments");
    }

    private async Task InsertAppointment()
    {
        if (StaffMember is null)
        {
            await JsRuntime.InvokeVoidAsync("alert", $"Please select a valid Staff Member");
            return;
        }
        if (SelectedPatient is null)
        {
            await JsRuntime.InvokeVoidAsync("alert", $"Please select a valid Patient");
            return;
        }
        string[] staffDetails = StaffMember.Split(' ');
        string[] patientDetails = SelectedPatient.Split(' ');

        if (!int.TryParse(patientDetails[0], out int patientId))
        {
            await JsRuntime.InvokeVoidAsync("alert", $"Please select a valid Patient");
            return;
        }
        if (!int.TryParse(staffDetails[0], out int staffId))
        {
            await JsRuntime.InvokeVoidAsync("alert", $"Please select a valid Staff Member");
            return;
        }

        if (_appointmentModel.AppointmentDateTime < DateTime.Now)
        {
            await JsRuntime.InvokeVoidAsync("alert", $"Appointment cannot be made in the past");
            return;
        }

        _appointmentModel.PatientId = patientId;
        _appointmentModel.StaffId = staffId;
        _appointmentModel.AppointmentDuration = int.Parse(Duration);

        if (Appointments != null)
        {
            var currentAppointments = Appointments.Where(x => x.StaffId == staffId || x.PatientId == patientId);
            var scheduledAppointmentEndTime = _appointmentModel.AppointmentDateTime.AddMinutes(_appointmentModel.AppointmentDuration);

            foreach (var appointment in currentAppointments)
            {
                var endTime = appointment.AppointmentDateTime.AddMinutes(appointment.AppointmentDuration);
                var isStartDateTimeInvalid = DateTimeRangeCheck(_appointmentModel.AppointmentDateTime, appointment.AppointmentDateTime, endTime);
                var isAppointmentDurationInvalid = DateTimeRangeCheck(scheduledAppointmentEndTime, appointment.AppointmentDateTime, endTime);

                if (isStartDateTimeInvalid || isAppointmentDurationInvalid)
                {
                    await JsRuntime.InvokeVoidAsync("alert", $"This appointment conflicts with another appointment.");
                    return;
                }
            }
        }
        try
        {
            Logger.LogInformation("Inserting Appointment ", _appointmentModel);
            await AppointmentDatabase.InsertAppointment(_appointmentModel);
        }
        catch (SqlException ex)
        {
            Logger.LogError("Error writing to database", ex);
        }
        BackToAppointments();
    }

    private bool DateTimeRangeCheck(DateTime proposedAppointment, DateTime startTime, DateTime endTime)
    {
        return proposedAppointment >= startTime && proposedAppointment < endTime;
    }
}
