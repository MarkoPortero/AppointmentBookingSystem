@page "/Patients"

@inject NavigationManager NavigationManager
@inject IPatientData Database
@inject IJSRuntime JsRuntime
@inject ILogger<Patient> Logger;
@attribute [Authorize(Roles = "Administrator, Receptionist")]

<h1>Patient</h1>

<h4>Insert new patient</h4>
<a class="btn btn-primary" href="PatientData/PatientAdd" role="button">Add Patient</a>

<h4 class="p-3">Current Patients</h4>
@if (_patients is null)
{
    <p><em>Loading Patients...</em></p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Patient Id</th>
                <th>First Name</th>
                <th>Last Name</th>
                <th>Address</th>
                <th>Contact Number</th>
                <th>Email Address</th>
                <th>Date of Birth</th>
            </tr>
        </thead>
        <tbody>
            @foreach (PatientModel patient in _patients)
            {
                <tr>
                    <td>@patient.Id</td>
                    <td>@patient.FirstName</td>
                    <td>@patient.LastName</td>
                    <td>@patient.Address</td>
                    <td>@patient.ContactNumber</td>
                    <td>@patient.Email</td>
                    <td>@patient.DateOfBirth.ToString("dd/MM/yyyy")</td>
                    <td>
                        <button class="btn-primary" @onclick="() => EditPatient(patient.Id)">Edit</button>
                        <button id="deletePatient" class="btn-primary" @onclick="() => DeletePatient(patient)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<PatientModel> _patients;
    protected override async Task OnInitializedAsync()
    {
        try
        {
            _patients = await Database.GetAllPatients();
        }
        catch (SqlException ex)
        {
            Logger.LogError("Error loading information from server", ex);
        }
    }

    private async Task DeletePatient(PatientModel patient)
    {
        if (!await JsRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete the patient '{patient.FirstName} {patient.LastName}'?"))
            return;
        try
        {
            await Database.DeletePatient(patient.Id);
            _patients.Remove(patient);
        }
        catch (SqlException ex)
        {
            Logger.LogError("Error loading information from server", ex);
        }
    }

    private void EditPatient(int patientId)
    {
        NavigationManager.NavigateTo($"/PatientData/PatientEdit/{patientId}");
    }
}
