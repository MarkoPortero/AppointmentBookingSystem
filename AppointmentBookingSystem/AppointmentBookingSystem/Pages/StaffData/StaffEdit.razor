@page "/StaffData/StaffEdit/{StaffId}"

@inject NavigationManager NavigationManager
@inject IStaffData StaffDatabase
@inject IUserCredentialsData CredentialsDatabase
@inject IUserRoleData UserRoleDatabase

@if (StaffViewModel is null)
{
    <p><em>Loading Staff...</em></p>
}
else
{
    <h1>Edit Staff Details</h1>
    <EditForm Model="StaffViewModel" OnValidSubmit="@InsertStaffMember">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <label class="col-sm-2 col-form-label">First Name</label>
            <InputText id="firstName" @bind-Value="StaffViewModel.FirstName"/>
        </div>
        <div class="form-group">
            <label class="col-sm-2 col-form-label">Last Name</label>
            <InputText id="lastName" @bind-Value="StaffViewModel.LastName"/>
        </div>
        <div class="form-group">
            <label class="col-sm-2 col-form-label">Address</label>
            <InputText id="address" @bind-Value="StaffViewModel.Address"/>
        </div>
        <div class="form-group">
            <label class="col-sm-2 col-form-label">Staff Member Role</label>
            <InputSelect id="role" @bind-Value="StaffViewModel.Role">
                @foreach (var userRole in UserRoles)
                {
                    <option>@userRole.UserRole</option>
                }
            </InputSelect>
        </div>
        <div class="form-group">
            <label class="col-sm-2 col-form-label">UserName</label>
            <InputText id="userName" @bind-Value="StaffViewModel.UserName"/>
        </div>
        <div class="form-group">
            <label class="col-sm-2 col-form-label">Password</label>
            <InputText id="password" @bind-Value="StaffViewModel.Password"/>
        </div>

        <button type="submit" class="btn btn-primary">Save Staff</button>
        <button type="button" class="btn btn-primary" @onclick="BackToStaff">Back</button>
    </EditForm>
}
@code {
    [Parameter]
    public string StaffId { get; set; }
    private StaffViewModel StaffViewModel { get; set; }
    private StaffModel StaffMember { get; set; }
    private UserCredentialsModel Credentials { get; set; }
    private UserRolesModel UserRole { get; set; }
    private List<UserRolesModel> UserRoles { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var staffData = await StaffDatabase.GetStaff(int.Parse(StaffId));
        StaffMember = staffData.FirstOrDefault();
        if (StaffMember != null)
        {
            var credentialData = await CredentialsDatabase.GetCredential(StaffMember.UserId);
            Credentials = credentialData.FirstOrDefault();
        }
        else
        {
            throw new ArgumentNullException(nameof(StaffMember));
        }
        var userRoleData = await UserRoleDatabase.GetUserRole(StaffMember.RoleId);
        UserRole = userRoleData.FirstOrDefault();
        UserRoles = await UserRoleDatabase.GetAllUserRoles();
        StaffViewModel = MapStaffViewModel(StaffMember);
    }

    private StaffViewModel MapStaffViewModel(StaffModel staff)
    {
        return new StaffViewModel
        {
            Address = staff.Address,
            FirstName = staff.FirstName,
            LastName = staff.LastName,
            Id = staff.Id,
            Role = UserRole.UserRole,
            UserName = Credentials.UserName,
            Password = Credentials.Password
        };
    }

    private async Task InsertStaffMember()
    {
        var credentials = new UserCredentialsModel
        {
            Id = StaffMember.UserId,
            Password = StaffViewModel.Password,
            UserName = StaffViewModel.UserName
        };

        var staffMember = new StaffModel
        {
            Id = StaffViewModel.Id,
            Address = StaffViewModel.Address,
            FirstName = StaffViewModel.FirstName,
            LastName = StaffViewModel.LastName,
            RoleId = UserRoles.Find(x =>
            {
                return x.UserRole.Equals(StaffViewModel.Role);
            }).Id,
            UserId = StaffMember.UserId
        };

        await CredentialsDatabase.UpdateCredentials(credentials);
        await StaffDatabase.UpdateStaff(staffMember);
        //wipe out staff model
        StaffViewModel = new StaffViewModel();
        BackToStaff();
    }

    private void BackToStaff()
    {
        NavigationManager.NavigateTo("/Staff");
    }
}
